# -*- coding: utf-8 -*-
"""power.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1f36phsL3Pv9GKGeI7R6Myv9er2OGHRsa
"""

import pandas as pd
import numpy as np
import warnings
warnings.filterwarnings('ignore')
from sklearn.preprocessing import LabelEncoder
import matplotlib.pyplot as plt
import seaborn as sns
import joblib


data = pd.read_csv('/content/drive/MyDrive/power.csv')

# check null values
data.isnull().sum()

data.dtypes

data.describe()

data.duplicated().sum()

#  Correlation Heatmap
plt.figure(figsize=(12, 8))
# Select only numeric columns for correlation
numeric_data= data.select_dtypes(include=np.number)
sns.heatmap(numeric_data.corr(), annot=True, cmap='coolwarm', fmt='.2f')
plt.title("Correlation Heatmap")
plt.tight_layout()
plt.show()

# Convert the 'Date' column to datetime (if it's not already)
data['Date'] = pd.to_datetime(data['Date'])
# If the 'Time' column is in datetime format and you want to extract just the time, use .dt.time
data['Time'] = pd.to_datetime(data['Time'], format='%H:%M:%S').dt.time


col = ['Date','Time', 'temperature_2m', 'relativehumidity_2m', 'dewpoint_2m',
       'windspeed_10m', 'windspeed_100m', 'winddirection_10m','winddirection_100m','windgusts_10m',
       'Power']
data = data[col]

X= data.iloc[:, 2:-1]
X
y = data.iloc[:, -1]
y

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.8, random_state=0, shuffle=True)

# prompt: make prediction for the Electricity_Produced_kWh by giving input


from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score

# Initialize and train a model (e.g., RandomForestRegressor)
model = RandomForestRegressor(n_estimators=100, random_state=42)  # Adjust parameters as needed
model.fit(X_train, y_train)

# Make predictions on the test set
y_pred = model.predict(X_test)

# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)
print(f"Mean Squared Error: {mse:.2f}")
print(f"R-squared Score: {r2:.4f}")

def predict_power(input_data):
    input_df = pd.DataFrame([input_data])
    input_df = input_df[X_train.columns]
    prediction = model.predict(input_df)
    return prediction[0]

# Example usage
input_data = {
    'temperature_2m': 28.5,
    'relativehumidity_2m': 85,
    'dewpoint_2m': 24.5,
    'windspeed_10m': 1.44,
    'windspeed_100m': 1.26,
    'winddirection_10m': 146,
    'winddirection_100m': 162,
    'windgusts_10m': 1.4,
}

predicted_power = predict_power(input_data)
print(f"Predicted power Production: {predicted_power:} kWh")

joblib.dump(model, "power.pkl")

from google.colab import files
files.download("power.pkl")